apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "video-hearings.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "video-hearings.name" . }}
    helm.sh/chart: {{ include "video-hearings.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "video-hearings.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "video-hearings.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        aadpodidbinding: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image }}"
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- if .Values.probes.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.path }}
              port: http
            initialDelaySeconds: 15
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.path }}
              port: http
            initialDelaySeconds: 20
            periodSeconds: 5
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            {{- range $key, $value := $.Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          volumeMounts:
          - name: appsettings
            mountPath: "app/appsettings.Production.json"
            subPath: "appsettings.json"

      initContainers:
      {{- with $.Values.keyvaults }}
      - name: init-envvars
        image: mcr.microsoft.com/powershell:latest
        command:
        - pwsh
        - "-command"
        - "$settings = @{};gci env:\\CONFIGITEM_* | % {$cname = \"$($_.name -ireplace \"CONFIGITEM_\")\".replace('_',':');if ($_.value -imatch '^<azure-secret:(.+)>$') {$settings += @{$cname = \"$((gc \"/secrets/*/$($matches[1])\"))\"}}else{$settings += @{$cname = $_.value}}};$settings | convertto-json | set-content /config/appsettings.json -Force"

        env:
            {{- range $key, $value := $.Values.appsettings }}
            - name: {{- printf " CONFIGITEM_%s" $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $key, $value := $.Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
        volumeMounts:
        - name: appsettings
          mountPath: /config
        {{- range $.Values.keyvaults}}
        - name: {{ .name }}
          mountPath: "{{- printf "/secrets/%s" .name }}"
        {{- end }}
      {{- end }}

      volumes:
      - name: appsettings
        emptyDir: {}
      {{- range $.Values.keyvaults}}
      - name: {{ .name }}
        flexVolume:
          driver: "azure/kv"
          secretRef:
            name: {{ .secretref }}
          options:
            usepodidentity: "false"
            keyvaultname: {{ .name }}
            keyvaultobjectnames: {{ join ";" .secrets | quote }}
            keyvaultobjecttypes: {{ repeat (len .secrets) "secret;" | trimSuffix ";" | quote }}
            resourcegroup: {{ .resourcegroup }}
            subscriptionid: {{ .subscriptionid }}
            tenantid: {{ .tenantid }}

      {{- end }}
      {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
